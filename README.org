* rolling_ball

** Libraries Used

- GLM
- SDL2
- ImGUI
- stb

** Tasks

*** DONE (15 min) Setup SDL2 and ImGUI

*** DONE (30 min) Define axis and grid parameters.
- X Define length of each axis line -> (unlimited)
- X Define grid size (how many units between grid lines)
- X Choose colours for axes and grid lines

*** DONE (30 min -- +135min overdue) Draw Axes + Grid

- X Implement functions to draw lines representing X and Z
- X Lines not being seen right now, fix it
- X Implement basic camera
- X Fix extra lines bug

*** DONE (30 min -- +30 min overdue) Implement Camera Controls

- X To navigate around the scene, to help me put objects correctly
- X Smooth camera implementation (wasd)
- X Fix clunky mouse movement

*** DONE (2h -- +95 min overdue) Add game menu to jump into the editor

- X Game state -> (in game, editor, menu, etc)
- X Refactor cuz game state is added
- X Implement cursor (lol wasted tons of time cuz ImGui already had it... but it will be useful for the upcoming UI)
- X When the game is in editor, then render grid, show cursor, move camera
- X Show ImGui menu to choose game options (temp)
- X Options: Play, Editor, Quit

*** DONE (1 week + research) Add model to the world, entity picking, entity transformations, AABBs

- X Add left panel -> current position.
- X Separate renderers at least by responsibility
- X Add event system
- X Add level editor modes
- X Selecting a checkbox to select wall, ground or ball
- X Create Model and Mesh classes, parse obj file
- X Once selected, click on the world to place the object
- X Sometimes you have a texture attached to the model and sometimes the colour only, figure out how to deal with this
- X Button to clear entities
- X Create basic ECS
- X Fix Mouse bug when getting yAngle > 90ยบ or < -90ยบ
- X Fix ImGui mouse bug
- X Automatically select the object that was just created
- X Fix Input bug
- X Option to rotate object X, Y and Z
- X Show imgui options to modify x, y and z placement of selected object
- X Actually apply modifications. Fix emplace
- X Fix rotation
- X Select object pressing left mouse click (kinda words, needs visual debuggin)
- X Refactor
- X Improve compilation time
- X Refactor event and mesh files
- X Reimplement entity moving using sliders
- X Add a visual ray that shows where my mouse is pointing at the moment (to see if grabbing the object works)
- X Draw Cube around entity to know its picking hitbox -> make sure it works
- X BUG: after adding a new entity, it suddenly changes to the previous one when manipulating imgui sliders
- X BUG: even though AABBs are updated and rendered correctly, entity picking doesn't work. double check math? but it was working..
- X BUG: Every mesh has to have its own AABB -> the maze object has multiple meshes but only has one aabb.
- X Create hierarchy or something to move an entity and all of its meshes by clicking on the parent object.
  - it just works for now idk why
- Understand math behind ray-aabb check
- X When entity is selected, draw yellow border
  - No one's gonna use your shitty engine and you already know how it works so it's pointless
- X Implement deselection if you click in an area where there's nothing
- X Implement clearing scene
- X Implement full screen mode
- X Change inputs for floats because it's very annoying
- X Code is a fucking mess, fix
  - X Read about ECS and fix your shit, for now it kinda works
- X Add chance to remove selected entity
- X Test reusing entities
- X Rename DeleteX and use RemoveX instead, be consistent
- X Change header files from .hpp to .h (core guidelines, they know better than me)
- X Reorder function order in h-cpp files and get rid of annoying clang indentation

*** TODO (4+ hours + research) Save current scene or level and load it back

- X Show ImGui button to save current level
- For serialising/deserialising, it's a good idea to use fixed types. Change int to i32, unsigned int to u32, float to f32, etc.
  - X level editor
  - X resource manager
  - Everywhere!
- Show ImGui list to show levels to load
- Serialise
- Deserialise
- Adding rigid body somewhere???

*** TODO Define start and end points in the created level

- The end point acts as a trigger, whenever the ball position is inside the bounding box of the end position, then game ended
- The start point is needed to know where to place the ball initially

*** TODO Add model materials to make it look better

- Create all five levels

*** TODO Define lighting for level editing (ambient + directional is good I think)

*** TODO Implement basic collision detection

- Use a spatial hash grid for positioning objects around the world and improve speed
- Use fixed time steps to avoid weird physics glitches caused by variable time steps (let player choose between 60, 120, 144, 240)
- Implement basic collision detection/resolution between AABBs and Spheres

*** TODO Implement game play state

- Load level, ensure ball spawns at start
- Ensure ball movement works correctly
- Ensure ball physics with walls work correctly
- Ensure ball hits end trigger and next level is loaded

*** TODO Add basic music

- Allow user to select audio device and regulate volume

*** TODO Every time you finish a level

- Show time elapsed
- Show stars? based on time
- Show some fancy special effects like confetti or something, particles!

*** TODO Add decent game UI

- Get rid of ImGUI debug stuff to add cool buttons

*** TODO Add the constant and variable data uniforms through shaders

*** TODO Add initial game video or show screen

*** TODO Optimise entity manager so that it reuses ids instead of removing every time
